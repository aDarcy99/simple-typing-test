/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdatetyping_test_node"]("index",{

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _style_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style.css */ \"./src/style.css\");\n/* harmony import */ var _public_words__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../public/words */ \"./public/words.js\");\n/* harmony import */ var _functions_mathFunctions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./functions/mathFunctions */ \"./src/functions/mathFunctions.js\");\n\n\n\nlet test = {\n  started: false,\n  text: {\n    full: \"\",\n    spaceSeperated: []\n  },\n  input: {\n    full: \"\",\n    spaceSeperated: []\n  },\n  time: {\n    totalTime: 60,\n    timeElapsed: 0,\n    timer: null\n  },\n  data: {\n    WPM: 0,\n    incorrectWords: 0,\n    adjustedWPM: 0,\n    text: []\n  }\n}; //\n\nlet distanceFromTop = 0;\nlet hasDistanceChanged = false; //functions\n\nconst setupTestText = () => {\n  let text = getRandomWords(400);\n  return text;\n};\n\nconst setupTestTime = () => {\n  return document.querySelector(\"#time-input\").value * 60;\n};\n\nconst setupTextData = spaceSeperatedText => {\n  return spaceSeperatedText.map(word => ({\n    word: word,\n    spelling: undefined,\n    status: undefined\n  }));\n};\n\nconst getTestResults = () => {\n  const incorrectWords = test.data.text.reduce((acc, curr) => curr.status === \"incorrect\" ? acc + 1 : acc, 0);\n  test.data = { ...test.data,\n    WPM: test.input.full.length / 5 / (test.time.totalTime / 60),\n    incorrectWords: incorrectWords,\n    adjustedWPM: (test.input.full.length / 5 - incorrectWords) / (test.time.totalTime / 60)\n  };\n}; //Render HTML functions\n\n\nconst renderTestText = () => {\n  const textContainerElement = document.querySelector(\"#text-container\");\n  let result = \"\";\n  test.data.text.forEach(word => {\n    result += `<span style=\"color: ${word.status === \"incorrect\" ? \"#F25F5C\" : word.status === \"correct\" ? \"#2FBF71\" : word.status === \"current\" ? \"blue\" : \"black\"}\"\n    class=\"${word.status === \"incorrect\" ? \"incorrect\" : word.status === \"correct\" ? \"correct\" : word.status === \"current\" ? \"current\" : \"\"}\"\n    >${word.word}</span><span> </span>`;\n  });\n  textContainerElement.innerHTML = result;\n};\n\nconst renderTimeLeft = time => {\n  const timeLeftContainer = document.querySelector(\"#time-left\");\n  timeLeftContainer.textContent = `Time Left: ${time} seconds`;\n};\n\nconst renderResults = () => {\n  document.querySelector(\"#WPM\").textContent = test.data.WPM;\n  document.querySelector(\"#incorrect-words\").textContent = test.data.incorrectWords;\n  document.querySelector(\"#adjusted-WPM\").textContent = test.data.adjustedWPM;\n}; //\n\n\nconst updateCurrentLineHeight = () => {\n  const textContainer = document.querySelector(\"#text-container\");\n  const currentDistanceFromTop = document.querySelector(\".current\").getBoundingClientRect().top;\n  const currentContainerOffset = textContainer.style.transform ? parseInt(textContainer.style.transform.substring(11), 10) : 0; //get the differnce between the current distance from top and the set distance from top\n\n  const difference = currentDistanceFromTop - distanceFromTop; //If the distance has changed change the variables, and skip the rest of the function\n\n  if (hasDistanceChanged) {\n    hasDistanceChanged = false;\n    distanceFromTop = currentDistanceFromTop;\n    return;\n  } //Get the current transform value and add the difference between the current offset and next offset\n\n\n  if (difference > 0 && difference < 100) {\n    textContainer.style.transform = `translateY(${currentContainerOffset - difference}px)`;\n    hasDistanceChanged = true;\n  } else if (difference < 0 && difference < 100) {\n    textContainer.style.transform = `translateY(${currentContainerOffset - difference}px)`;\n    hasDistanceChanged = true;\n  }\n\n  distanceFromTop = currentDistanceFromTop;\n}; //Test Controller Functions\n\n\nconst initializeTest = () => {\n  console.log(\"test started\");\n  resetTest(); //Set first word as current word\n\n  test.data.text[0] = { ...test.data.text[0],\n    status: \"current\"\n  }; //Render the test text\n\n  renderTestText(); //Get first line height at start of test\n\n  updateCurrentLineHeight(); //Initialize timer\n\n  test.time.timer = setInterval(() => {\n    //\n    getTestResults(); //Render change in the amount of time left\n\n    renderTimeLeft(test.time.totalTime - test.time.timeElapsed); //Check if time limit has been reached\n\n    if (test.time.timeElapsed === test.time.totalTime || test.started === false) {\n      endTest();\n      clearInterval(test.time.timer);\n      test.time.timer = 0;\n      return;\n    }\n\n    test.time.timeElapsed++;\n  }, 1000);\n};\n\nconst endTest = () => {\n  console.log(\"test ended\"); //Set Properties of test object\n\n  test.started = false;\n  test.time.timeElapsed = test.time.totalTime; //render results\n\n  renderResults();\n  document.querySelector(\"#text-input\").disabled = true; //Reverse Buttons\n\n  document.querySelector(\"#start-button\").classList.remove(\"hidden\");\n  document.querySelector(\"#cancel-button\").classList.add(\"hidden\"); //Reverse results\n\n  document.querySelector(\"#results\").classList.remove(\"hidden\");\n};\n\nconst resetTest = () => {\n  test.started = true;\n  test.results = {}; //Reset Text Value\n\n  test.text.full = setupTestText();\n  test.text.spaceSeperated = test.text.full.split(\" \"); //Reset Input Value\n\n  test.input.full = \"\";\n  test.input.spaceSeperated = [];\n  document.querySelector(\"#text-input\").value = \"\"; //Reset Time Values\n\n  test.time.totalTime = setupTestTime();\n  test.time.timeElapsed = 0; //Reset data\n\n  test.data.text = setupTextData(test.text.spaceSeperated); //reset DOM elements\n\n  document.querySelector(\"#text-container\").textContent = \"\";\n  document.querySelector(\"#text-input\").disabled = false; //Reverse Buttons\n\n  document.querySelector(\"#start-button\").classList.add(\"hidden\");\n  document.querySelector(\"#cancel-button\").classList.remove(\"hidden\"); //Results\n\n  document.querySelector(\"#results\").classList.add(\"hidden\");\n}; //text-input Event Handlers\n\n\nconst textInputElement = document.querySelector(\"#text-input\");\ntextInputElement.addEventListener(\"paste\", Event => {\n  Event.preventDefault();\n});\ntextInputElement.addEventListener(\"keyup\", Event => {\n  if (!test.started) return null; //Set Input Values\n\n  test.input.full = Event.target.value;\n  test.input.spaceSeperated = test.input.full.split(\" \"); //Update every word in test.data.text on keyup \n\n  test.text.spaceSeperated.forEach((word, wordIdx) => {\n    const currentWordIdx = test.input.spaceSeperated.length - 1;\n\n    if (wordIdx === currentWordIdx) {\n      //If its the current word (the word where the user input is up to)\n      test.data.text[wordIdx] = { ...test.data.text[wordIdx],\n        spelling: test.input.spaceSeperated[wordIdx],\n        status: \"current\"\n      };\n    } else if (word !== test.input.spaceSeperated[wordIdx] && test.input.spaceSeperated[wordIdx]) {\n      //If it is an incorrect word\n      test.data.text[wordIdx] = { ...test.data.text[wordIdx],\n        spelling: test.input.spaceSeperated[wordIdx],\n        status: \"incorrect\"\n      };\n    } else if (word === test.input.spaceSeperated[wordIdx]) {\n      //If it is a correct word\n      test.data.text[wordIdx] = { ...test.data.text[wordIdx],\n        spelling: test.input.spaceSeperated[wordIdx],\n        status: \"correct\"\n      };\n    } else {\n      test.data.text[wordIdx] = { ...test.data.text[wordIdx],\n        spelling: undefined,\n        status: undefined\n      };\n    }\n  }); //rerender the new test text\n\n  renderTestText();\n  updateCurrentLineHeight();\n}); //start Button Event Handlers\n\ndocument.querySelector(\"#start-button\").addEventListener(\"click\", Event => {\n  initializeTest();\n});\ndocument.querySelector(\"#cancel-button\").addEventListener(\"click\", Event => {\n  endTest();\n});\ndocument.querySelector(\"#text-input\").addEventListener(\"change\", Event => {\n  renderTimeLeft(Event.target.value * 60);\n});\n\nconst getRandomWords = count => {\n  let result = \"\";\n\n  for (let i = 0; i <= count; i++) {\n    const randomNumber = Math.floor((0,_functions_mathFunctions__WEBPACK_IMPORTED_MODULE_2__.getRandomArbitrary)(0, _public_words__WEBPACK_IMPORTED_MODULE_1__.default.length));\n\n    if (i !== count) {\n      result += `${_public_words__WEBPACK_IMPORTED_MODULE_1__.default[randomNumber]} `;\n    } else {\n      result += `${_public_words__WEBPACK_IMPORTED_MODULE_1__.default[randomNumber]}.`;\n    }\n  }\n\n  return result;\n};\n\n//# sourceURL=webpack://typing-test-node/./src/index.js?");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ "use strict";
/******/ 
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("1e379c6fcfdeb1018c8d")
/******/ })();
/******/ 
/******/ }
);